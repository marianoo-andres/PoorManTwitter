new Vue({
	el: '#vue-app',
	data: {
		tweets: [],
		newTweet: {
			name: '',
			message: '',
			created: '',
		},
		loading: false,
		showError: false
	},
	methods: {
		createdToString: function(tweet) {
			let datetime = new Date(tweet.created);
			return datetime.toLocaleTimeString('en-US');
		},

		createTweet: async function() {
			// Ignore button clicks while creating the tweet to
			// prevent multiple creations
			if (this.loading) return;

			// Prevent creating blank tweets
			if (!this.newTweet.message || !this.newTweet.name) return;

			// Show loader
			this.loading = true;

			try {
				// Post the tweet. We save the tweet from the
				// response as it contains the created datetime
				// generated by the server.
				this.newTweet = await postTweet(this.newTweet);

				// We need to clone the tweet object before inserting it
				// on the list. If we didn't clone it, the tweet created would
				// be modified when typing on the form's input fields.
				this.tweets.splice(0, 0, Object.assign({}, this.newTweet));

				// Reset form inputs
				this.newTweet.name = '';
				this.newTweet.message = '';
				this.newTweet.created = '';
			}
			catch (error) {
				this.showError = true;
			}

			finally {
				// Hide loader
				this.loading = false;
			}
		},

		orderByTime: function(ascending) {
			if (ascending) {
				this.tweets.sort(function(a, b){
				 	return new Date(a.created) - new Date(b.created);
				});				
			}

			else {
				this.tweets.sort(function(a, b){
				 	return new Date(b.created) - new Date(a.created);
				});		
			}

		},

		orderByName: function(ascending) {
			if (ascending) {
				this.tweets.sort(function(a, b) {
					return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
				});				
			}

			else {
				this.tweets.sort(function(a, b) {
					return b.name.toLowerCase().localeCompare(a.name.toLowerCase());
				});		
			}
		},

		resetError: function () {
			this.showError = false;
		}

	},
	beforeMount: async function() {
		try {
			this.tweets = await getTweets();
		}
		catch (error) {
			this.showError = true;
		}

	}
});